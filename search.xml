<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[数据结构&算法之美专栏笔记]]></title>
    <url>%2F2018%2F10%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E%E4%B8%93%E6%A0%8F%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[最近买了极客时间的专栏数据结构和算法之美，抽空看了一下，并且整理记录一下关键点 复杂度分析 数据结构 数组 链表 栈 队列 散列表 二叉树 堆 跳表 图 Tire树 算法 递归 排序 二分查找 搜索 哈希算法 贪心算法 分治算法 回溯算法 动态规划 字符串匹配算法 知识图谱]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins学习笔记]]></title>
    <url>%2F2018%2F09%2F15%2Fjenkins%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[jenkins已经是一个比较成熟的集成工具开源软件，整理一下问题方法官网https://jenkins.io/ 提供了windows、macOS、linx多个系统版本的安装包，最简单的是直接下载最下面一个Generic Java package (.war)，然后像这样直接执行下面的命令，然后就可以通过浏览器地址栏http://localhost:8080 配置jenkins了1java -jar jenkins.war jenkins关闭jenkins默认在浏览器地址打开localhost:8080 1http://localhost:8080/exit jenkins重启 1http://localhost:8080/restart jenkins重新加载 1http://localhost:8080/reload]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Authenticator身份验证]]></title>
    <url>%2F2018%2F09%2F05%2FgoogleAuthenticator%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[###GoogleAuthenticator###数字币交易所常用的google authenticator身份验证，github仓库 https://github.com/PHPGangsta/GoogleAuthenticator 服务端(PHP)1234# 测试生成secret$ga = new GoogleAuthenticator();$secret = $ga-&gt;createSecret(64);# $secret = GKRYEJO34IOK7UAABLNZL2TBEHLRT4JJAMGW4UXFD6EK5F4AYVAHZOT32SFSTAN4 12345678910111213141516# 二维码获得$qrCodeUrl = $ga-&gt;getQRCodeGoogleUrl('zhaoTest', $secret);# 单次验证码$oneCode = $ga-&gt;getCode($secret);# 把提交的验证码和服务端上生成的验证码做对比# $secret 服务端的 "安全密匙SecretKey"# $oneCode 手机上看到的 "一次性验证码"# 最后一个参数 为容差时间,这里是2 那么就是 2* 30 sec 一分钟.$checkResult = $ga-&gt;verifyCode($secret, $oneCode, 2);if ($checkResult) &#123; echo '匹配! OK';&#125; else &#123; echo '不匹配! FAILED';&#125; 移动端ios在app store、android可以在google play（You know）安装Google身份验证器]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcp_bbr算法优化网络]]></title>
    <url>%2F2018%2F08%2F30%2Ftcp_bbr%E7%AE%97%E6%B3%95%E4%BC%98%E5%8C%96%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[参考连接：https://www.isthnew.com/archives/centos7-bbr.html]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[运行crontab,查看日志]]></title>
    <url>%2F2018%2F08%2F28%2Fcrontab%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[crontab服务 编辑crontab1crontab -e 当前用户第一次执行会提示你选择默认编辑器，crontab默认的是nano，如果以后想修改默认可以执行命令1select-editor 例如：12*/1 * * * * /usr/bin/php /home/vagrant/code/safetyControlApi/artisan schedule:run 1&gt;&gt; /dev/null 2&gt;&amp;1#每分钟执行脚本 重启crontab服务1sudo service cron restart crontab日志 crontab记录日志 12sudo vim /etc/rsyslog.d/50-default.confcron.* /var/log/cron.log #将cron前面的注释符去掉 重启rsyslog 1sudo service rsyslog restart 查看crontab日志 1less /var/log/cron.log]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Laravel读取表字段名]]></title>
    <url>%2F2018%2F08%2F28%2FLaravel%E8%AF%BB%E5%8F%96%E8%A1%A8%E5%AD%97%E6%AE%B5%E5%90%8D%2F</url>
    <content type="text"><![CDATA[Schema 1use Illuminate\Support\Facades\Schema; 读取 1$columns = Schema::getColumnListing('admins');]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hadoop配置记录]]></title>
    <url>%2F2018%2F07%2F22%2Fhadoop%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[这个周末做了一次运维，配置了大数据分析平台，主要用到的开源软件是python3.6.2，hadoop3.0.3，spark，hue，hive这五个。 hadoophadoop配置参考连接：https://blog.csdn.net/cafebar123/article/details/73500014配置hadoop碰到不能访问50070端口的问题，需要手动配置端口，hdfs-site.xml 添加如下：1234&lt;property&gt; &lt;name&gt;dfs.http.address&lt;/name&gt; &lt;value&gt;0.0.0.0:50070&lt;/value&gt;&lt;/property&gt; 然后重新格式化namenode sparkspark需要scala依赖参考连接：https://www.w3cschool.cn/spark_sql/spark_installation.html]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop,spark,hue,hive</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-stash用法]]></title>
    <url>%2F2018%2F07%2F16%2Fgit-stash%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[参考连接：https://www.cnblogs.com/tocy/p/git-stash-reference.html]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP解决约瑟夫环问题]]></title>
    <url>%2F2018%2F06%2F03%2F%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[约瑟夫问题是一个经典的算法问题，n个人围城一圈，从1开始依次报数，数到m的人退出，循环报数，知道剩下最后一个人例如：1，2，3，4，5。数到3 的退出 1，2，4，5 2，4，5 2，4 4最后剩下1 123456789101112131415function yue($n,$m)&#123; $arr = range(1,$n);//创建:含有100个值的数组 $i=0; while(count($arr)&gt;1) &#123; ++$i; //不断出队(即删除数组的第一个元素) $survice = array_shift($arr); if($i%$m&lt;&gt;0)&#123; //结合约瑟夫环问题 //报到3就自杀(从队列中踢出),否则等待下一次的审判(再次添加到队尾) array_push($arr, $survice); &#125; &#125; return current($arr); //返回元素的值&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux环境变量总结]]></title>
    <url>%2F2018%2F06%2F03%2Flinux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[参考链接：http://www.cnblogs.com/stli/archive/2010/03/30/1701018.html]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OSI七层网络模型]]></title>
    <url>%2F2018%2F06%2F03%2FOSI%E4%B8%83%E5%B1%82%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[OSI模型是一个工业标准，是一个逻辑上的规范和标准，定义了七层每一层不同的功能和规范，从底层一次向上为： 物理层物理层定义了设备接口上的一些电子电气化的标准，比如RJ45接口，光纤接口。传输介质双绞线，无线，光，电等 数据链路层 （MAC地址）二层定义了一个重要的表示，MAC地址，准确的说他必须在一个LAN内是唯一的。他由48位的十六进制组成，前24位是厂商表示，后24位 是厂商自定义的序列号。有时候 MAC地址就是表示了一个设备的位置。 网络层 （IP地址）网络层是用来逻辑上选路寻址的，这一层最重要的一个协议就是IP协议。基于ip 又分为 ARP，RARP，ICMP，IGMP等 传输层 （TCP/UDP协议）这一层定义类了两个重要的协议 TCP和UDP 。还有就是端口号的概念。这一层关联的是一个主机上的某个程序或者是服务。比如 tcp 80 的web服务 udp 4000的QQ 程序等。 （—-以上为必需的，以下可以统称为应用层—-） 会话层主要作用是建立会话和管理会话。我一般这样理解 会话的 比如 telnet 一台主机，是一次会话的链接。打开百度的网页，就和百度的服务器建立了一次会话。 表示层因为底层传输的是二进制，应用层无法直接识别。所以根据这一层的名字可以直接理解为他是一个翻译。比如把一长串的数据“翻译”成rmvb格式，交给上层的 快播 这个程序，把另一串数据“翻译成”MP3格式交给 音乐播放器。其实这一层的工作很多。压缩，解压缩，加密，解密等 应用层为用户提供了一个可以操所的界面，如windows的桌面化或UNIX的字符界面。 OSI七层的每一层是独立工作的，但是层与层之间是相互“合作”“兼容”的关系通常来说网络设备，如路由器是工作在第三层，交换机工作在第二层]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cgi,fast-cgi,php-fpm的区别]]></title>
    <url>%2F2018%2F06%2F02%2Fcgi-fast-cgi-php-fpm%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[CGI，Fast-CGI是只是协议，Fast-CGI是为了提高CGI程序的性能设计的， php-fpm实现了Fast-CGI协议。 修改php.ini之后，php-cgi进程的确是没办法平滑重启的。php-fpm对此的处理机制是新的worker进程用新的配置，已经存在的worker进程处理完手上的活就可以歇着了，通过这种机制来平滑过度。参考文章：https://segmentfault.com/a/1190000010612829 php-fpm配置参考连接：http://www.4wei.cn/archives/1002061]]></content>
      <categories>
        <category>CGI</category>
      </categories>
      <tags>
        <tag>CGI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo支持本地图片]]></title>
    <url>%2F2018%2F05%2F28%2Fhexo%E6%94%AF%E6%8C%81%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[我的随手记录的博客系统终于支持图片了，记录下支持的操作 把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true 1$ post_asset_folder: true 在hexo项目目录下执行命令，下载安装可以上传本地图片的插件hexo-asset-image 1$ npm install hexo-asset-image --save 图片插件安装完后，执行新建文章的命令后，会在文章同级目录下生成和文章同名的目录，这是存放图片的目录 1$ hexo n "test hexo image" #生成文章test-hexo-image.md的文件，同时生成了test-hexo-image的目录，以存放图片 在文章里引用图片时，须先把图片放到生成的目录下，然后直接在markdown文档里直接写图片名，不用写路径 1![xgo_logo](xgo_cn_logo.jpg) 最后是图片例子，用了我们自己项目的logo，希望我们项目组的技术和业务可以被行业认可！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascipt中var,const,let三个关键字的异同]]></title>
    <url>%2F2018%2F05%2F23%2Fjavascipt%E4%B8%ADvar-const-let%E4%B8%89%E4%B8%AA%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%BC%82%E5%90%8C%2F</url>
    <content type="text"><![CDATA[let和const是es5开始才有的语法，为了弥补单纯的var定义的不足 var: 可以定义全局和局部变量，定义后可修改，如果没有初始化，默认值为undefined，并且可能有变量提升的情况 const: 定义的其实是常量，而且不是初始化，一点定义和初始化后不能修改，也具有块级作用域 let: 定义块级变量，即局部变量 let和const不能重复定义同一变量]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[堆和栈的区别]]></title>
    <url>%2F2018%2F05%2F23%2F%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[堆（heap）栈（stack）是计算机世界不容忽视的概念，一直不太明白 数据结构中的堆和栈 内存中的堆区和栈区参考链接：http://www.cnblogs.com/stli/archive/2010/04/10/1709138.html]]></content>
      <categories>
        <category>理解计算机</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[golang编译跨平台的可执行文件]]></title>
    <url>%2F2018%2F05%2F23%2Fgolang%E7%BC%96%E8%AF%91%E8%B7%A8%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[golang作为一个静态语言本身提供了可以编译为多平台的可执行文件的工具go build，关键是两个参数GOOS和GOARCH具体的指令是:12345678910111213141516# 编译到 linux 64bit$ GOOS=linux GOARCH=amd64 go build# 或者可以使用 -o 选项指定生成二进制文件名字$ GOOS=linux GOARCH=amd64 go build -o app.linux# 编译到 linux 32bit$ GOOS=linux GOARCH=386 go build# 编译到 windows 64bit$ GOOS=windows GOARCH=amd64 go build# 编译到 windows 32bit$ GOOS=windows GOARCH=386 go build# 编译到 Mac OS X 64bit$ GOOS=darwin GOARCH=amd64 go build]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP启动内置Web Server]]></title>
    <url>%2F2018%2F05%2F08%2FPHP%E5%90%AF%E5%8A%A8%E5%86%85%E7%BD%AEWeb-Server%2F</url>
    <content type="text"><![CDATA[在接触过node，python，golang等语言后，发现PHP在包管理上真是挺麻烦的，而且5.3之前还必须依赖单独的webserver软件。从php5.4.0开始，php内置了web服务器，官方手册上说明这个内置的Web服务器主要用于本地开发使用，不可用于线上产品环境。执行命令1$ php -S localhost:8080 -t ~/www -S指定域名和端口，-t指定根目录，如果不加这个参数这默认当前目录为根目录，执行成功后输出php版本和监听的域名和端口以及根目录1234PHP 7.1.14 Development Server started at Tue May 8 10:23:49 2018Listening on http://localhost:8080Document root is /Users/wenpeng/wwwPress Ctrl-C to quit.]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dockerfile构建lamp环境]]></title>
    <url>%2F2018%2F04%2F27%2Fdockerfile%E6%9E%84%E5%BB%BAlamp%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[最近学习了docker,所以开始颠覆以前在虚拟机下的一些操作 参考链接：https://www.linuxidc.com/Linux/2016-10/136327.htm]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[判断VPS虚拟技术的方法]]></title>
    <url>%2F2018%2F04%2F25%2F%E5%88%A4%E6%96%ADVPS%E8%99%9A%E6%8B%9F%E6%8A%80%E6%9C%AF%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[CentOS或RedHat系统的话，执行安装命令：1$ yum install -y virt-what ubuntu或者debian系统的话，执行安装命令：1$ apt-get install virt-what virt-what是一个判断当前环境所使用的虚拟技术的脚本，常见的虚拟技术基本上都能正常识别出来。安装好virt-what后，执行命令：1$ virt-what 根据返回的信息，即可判断出当前VPS所使用的虚拟技术。]]></content>
      <categories>
        <category>VPS</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php5.3升级php5.6的坑]]></title>
    <url>%2F2018%2F04%2F17%2Fphp5-3%E5%8D%87%E7%BA%A7php5-6%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[整理一下最近升级PHP5.6碰到的坑，主要是php5.6不兼容php5.3的几个问题 htmlspecialchars默认字符集为UTF-8由于历史原因公司项目编码是GBK，这样这个函数输出为空参考链接：http://php.net/manual/zh/function.htmlspecialchars.php curl文件上传必须先设置 CURLOPT_SAFE_UPLOAD 为 FALSE 才能够使用 @file 语法来上传文件。 建议使用 CURLFile 类来上传文件 1curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false);]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS查看端口及杀死进程]]></title>
    <url>%2F2018%2F04%2F16%2Fmacos%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8F%8A%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[这个指令同样试用centos 按端口号查看进程：1sudo lsof -i :端口号 然后根据PID杀进程：1sudo kill -9 PID]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql查看QPS/TPS的方法]]></title>
    <url>%2F2018%2F04%2F16%2Fmysql%E6%9F%A5%E7%9C%8BQPS-TPS%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[对于运行中的MySQL监控运行状态的性能方法(1)QPS(每秒Query量)QPS = Questions(or Queries) / seconds1mysql &gt; show global status like 'Question%'; (2)TPS(每秒事务量)TPS = (Com_commit + Com_rollback) / seconds12mysql &gt; show global status like 'Com_commit'; mysql &gt; show global status like 'Com_rollback'; (3)key Buffer 命中率1mysql&gt;show global status like 'key%'; key_buffer_read_hits = (1-key_reads / key_read_requests) 100%key_buffer_write_hits = (1-key_writes / key_write_requests) 100% (4)InnoDB Buffer命中率1mysql&gt; show status like 'innodb_buffer_pool_read%'; innodb_buffer_read_hits = (1 - innodb_buffer_pool_reads / innodb_buffer_pool_read_requests) * 100% (5)Query Cache命中率1mysql&gt; show status like 'Qcache%'; Query_cache_hits = (Qcahce_hits / (Qcache_hits + Qcache_inserts )) * 100%; (6)Table Cache状态量1mysql&gt; show global status like 'open%'; 比较 open_tables 与 opend_tables 值 (7)Thread Cache 命中率12mysql&gt; show global status like 'Thread%'; mysql&gt; show global status like 'Connections'; Thread_cache_hits = (1 - Threads_created / connections ) * 100% (8)锁定状态1mysql&gt; show global status like '%lock%'; Table_locks_waited/Table_locks_immediate=0.3% 如果这个比值比较大的话，说明表锁造成的阻塞比较严重Innodb_row_lock_waits innodb行锁，太大可能是间隙锁造成的 (9)复制延时量1234567mysql &gt; show slave status``` 查看延时时间 (10) Tmp Table 状况(临时表状况) ``` bashmysql &gt; show status like 'Create_tmp%'; Created_tmp_disk_tables/Created_tmp_tables比值最好不要超过10%，如果Created_tmp_tables值比较大，可能是排序句子过多或者是连接句子不够优化 (11) Binlog Cache 使用状况1mysql &gt; show status like 'Binlog_cache%'; 如果Binlog_cache_disk_use值不为0 ，可能需要调大 binlog_cache_size大小 (12) Innodb_log_waits 量1mysql &gt; show status like 'innodb_log_waits'; Innodb_log_waits值不等于0的话，表明 innodb log buffer 因为空间不足而等待]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每个程序员应该读的最有影响力的书]]></title>
    <url>%2F2018%2F04%2F15%2Fthe-single-most-influential-book%2F</url>
    <content type="text"><![CDATA[本文来自stackoverflow的问题，What is the single most influential book every programmer should read？每个程序员应该读的最有影响力的书，整理在这里。 Code Complete (2nd edition) by Steve McConnell (代码大全) The Pragmatic Programmer （程序员修炼之道） Structure and Interpretation of Computer Programs （计算机程序的构造和解释） The C Programming Language by Kernighan and Ritchie Introduction to Algorithms by Cormen, Leiserson, Rivest &amp; Stein （算法导论） Design Patterns by the Gang of Four （设计模式） Refactoring: Improving the Design of Existing Code （重构:改善既有代码的设计） The Mythical Man Month （人月神话） The Art of Computer Programming by Donald Knuth （计算机程序设计艺术） Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman （编译程序：原理、技术和工具） Gödel, Escher, Bach by Douglas Hofstadter Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin （清洁代码：敏捷软件工艺手册） Effective C++ More Effective C++ CODE by Charles Petzold （编码的奥秘） Programming Pearls by Jon Bentley （编程珠玑） Working Effectively with Legacy Code by Michael C. Feathers （修改代码的艺术） Peopleware by Demarco and Lister （人件） Coders at Work by Peter Seibel （编程人生） Surely You’re Joking, Mr. Feynman! Effective Java 2nd edition Patterns of Enterprise Application Architecture by Martin Fowler （企业应用架构模式） The Little Schemer The Seasoned Schemer Why’s (Poignant) Guide to Ruby The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity The Art of Unix Programming Test-Driven Development: By Example by Kent Beck Practices of an Agile Developer Don’t Make Me Think Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin Domain Driven Designs by Eric Evans （领域驱动设计） The Design of Everyday Things by Donald Norman （设计心理学） Modern C++ Design by Andrei Alexandrescu Best Software Writing I by Joel Spolsky The Practice of Programming by Kernighan and Pike Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt Software Estimation: Demystifying the Black Art by Steve McConnel The Passionate Programmer (My Job Went To India) by Chad Fowler Hackers: Heroes of the Computer Revolution Algorithms + Data Structures = Programs Writing Solid Code JavaScript - The Good Parts Getting Real by 37 Signals Foundations of Programming by Karl Seguin Computer Graphics: Principles and Practice in C (2nd Edition) Thinking in Java by Bruce Eckel The Elements of Computing Systems Refactoring to Patterns by Joshua Kerievsky Modern Operating Systems by Andrew S. Tanenbaum The Annotated Turing Things That Make Us Smart by Donald Norman The Timeless Way of Building by Christopher Alexander The Deadline: A Novel About Project Management by Tom DeMarco The C++ Programming Language (3rd edition) by Stroustrup Patterns of Enterprise Application Architecture Computer Systems - A Programmer’s Perspective Agile Principles, Patterns, and Practices in C# by Robert C. Martin Growing Object-Oriented Software, Guided by Tests Framework Design Guidelines by Brad Abrams Object Thinking by Dr. David West Advanced Programming in the UNIX Environment by W. Richard Stevens Hackers and Painters: Big Ideas from the Computer Age （黑客和画家） The Soul of a New Machine by Tracy Kidder CLR via C# by Jeffrey Richter The Timeless Way of Building by Christopher Alexander Design Patterns in C# by Steve Metsker Alice in Wonderland by Lewis Carol Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig About Face - The Essentials of Interaction Design Here Comes Everybody: The Power of Organizing Without Organizations by Clay Shirky The Tao of Programming （编程之道） Computational Beauty of Nature Writing Solid Code by Steve Maguire Philip and Alex’s Guide to Web Publishing Object-Oriented Analysis and Design with Applications by Grady Booch Effective Java by Joshua Bloch Computability by N. J. Cutland Masterminds of Programming The Tao Te Ching The Productive Programmer The Art of Deception by Kevin Mitnick The Career Programmer: Guerilla Tactics for an Imperfect World by Christopher Duncan Paradigms of Artificial Intelligence Programming: Case studies in Common Lisp Masters of Doom （DOOM启世录） Pragmatic Unit Testing in C# with NUnit by Andy Hunt and Dave Thomas with Matt Hargett How To Solve It by George Polya The Alchemist by Paulo Coelho Smalltalk-80: The Language and its Implementation Writing Secure Code (2nd Edition) by Michael Howard Introduction to Functional Programming by Philip Wadler and Richard Bird No Bugs! by David Thielen Rework by Jason Freid and DHH JUnit in Action 参考链接：https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read]]></content>
      <categories>
        <category>Book</category>
      </categories>
      <tags>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL主从复制与主主复制]]></title>
    <url>%2F2018%2F04%2F02%2Fmysql%E4%B8%BB%E4%B8%BB%E5%92%8C%E4%B8%BB%E4%BB%8E%2F</url>
    <content type="text"><![CDATA[mysql主从复制和主主复制的技术已经算是比较成熟了https://www.cnblogs.com/phpstudy2015-6/p/6485819.html]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用ssh-copy-id将ssh-key复制到远程主机实现免密登录]]></title>
    <url>%2F2018%2F03%2F29%2Fssh-copy-id%2F</url>
    <content type="text"><![CDATA[运行命令ssh-copy-id user@server，按照提示输入自己的登录密码，马上就会提示你登录，就可以了]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地配置多个ssh-key]]></title>
    <url>%2F2018%2F03%2F15%2Fconfigure-multiple-ssh-key%2F</url>
    <content type="text"><![CDATA[访问公司的服务器已经生成了ssh-key,再访问GitHub的git版本库时，还要需要生成不同的ssh-key1$ ssh-keygen -t rsa -C "youremail@yourcompany.com" 回车执行后，修改生成文件的路径或者文件名，然后在文件里~/.ssh/config 配置不同域名的ssh-key文件,比如我的Github配置12345Host github.com HostName github.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_github% 分两种情况，一台电脑几个不同域名的账号和一台电脑多个同一域名的账号参考链接：http://justcoding.iteye.com/blog/2265628]]></content>
      <categories>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用Hexo生成静态博客]]></title>
    <url>%2F2018%2F02%2F28%2Fhello-world%2F</url>
    <content type="text"><![CDATA[虽然一名PHP程序员，但是觉得node + npm + github的工具特别好用，所有用Hexo框架来生成一个纯静态博客站。这里是整理hexo框架搭建后的常用命令及其说明。 新建文章文件1$ hexo n "my article" #完整命令为hexo new,新建一篇名为“my article”的文章 开启本地webserver服务1$ hexo s #完整命令为hexo server,启动本地webserver服务 清除生成的本地静态文件1$ hexo clean #清除生成的本地静态文件 生成静态文件1$ hexo g #完整命令为hexo generate,用于生成静态文件 上传到远程站点1$ hexo d #完整命令为hexo deploy,用于将本地文件发布到远程仓库]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
